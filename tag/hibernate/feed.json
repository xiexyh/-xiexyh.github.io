{
    "version": "https://jsonfeed.org/version/1",
    "title": "XYH",
    "subtitle": "",
    "icon": "http://www.xieyihui.top/images/favicon.ico",
    "description": "",
    "home_page_url": "http://www.xieyihui.top",
    "items": [
        {
            "id": "http://www.xieyihui.top/2020/11/07/computer-science/SSH/week-9/",
            "url": "http://www.xieyihui.top/2020/11/07/computer-science/SSH/week-9/",
            "title": "第9周 HQL连接查询、Hibernate注解",
            "date_published": "2020-11-07T07:23:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note info\">\n<p>以下为个人学习笔记</p>\n</div>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"hibernate使用sql语句\"><a class=\"anchor\" href=\"#hibernate使用sql语句\">#</a> Hibernate 使用 SQL 语句</h2>\n<p>说明：Hibernate 支持全部的 SQL 查询<br />\n方法： <code>session.createSQLQuery(SQL语句)</code> <br />\n<span class=\"red\"> 注意：</span>参数是 SQL 语句，不再是 HQL 语句<br />\n返回结果： <code>Object[]</code> <br />\n<strong> 例 1：所有部门的部门号、部门名称，以及每个部门的所属员工（员工号，员工姓名）</strong><br />\n<strong>表结构：</strong><br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/9.1.png\" alt=\"\" /><br />\n<strong>分析：</strong><br />\n（1）由于查询的字段来源于多张表，所以要使用 join 查询<br />\n（2）部门表中的所有记录必须显示，dept 应放在 from 后，即 from dept (left join emp on …)<br />\n<strong> SQL 语句：</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">,</span>dept<span class=\"token punctuation\">.</span>dname<span class=\"token punctuation\">,</span> emp<span class=\"token punctuation\">.</span>empno<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>ename <span class=\"token keyword\">from</span> dept</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> emp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">on</span> dept<span class=\"token punctuation\">.</span>deptno<span class=\"token operator\">=</span>emp<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getDeptEmpsSQL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span> <span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SQLQuery</span> sq <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">createSQLQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select dept.deptno,dept.dname, emp.empno,emp.ename from dept \"</span><span class=\"token operator\">+</span><span class=\"token string\">\"left join emp \"</span><span class=\"token operator\">+</span><span class=\"token string\">\"on dept.deptno=emp.deptno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> sq<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objs<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token operator\">:</span>objs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>运行结果：</strong><br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/9.2.png\" alt=\"\" /></p>\n<h2 id=\"聚合函数和分组统计\"><a class=\"anchor\" href=\"#聚合函数和分组统计\">#</a> 聚合函数和分组统计</h2>\n<p>说明： <code>session.createQuery(HQL语句)</code> <br />\n session.createSQLQuery (SQL 语句)，所有 SQL 语句均可在此方法中被执行<br />\n上述两种方式都能实现分组聚合，且返回的结果都是 <code>Object[]</code> 。<br />\n以下使用 session.createSQLQuery (SQL 语句) 实现。</p>\n<ul>\n<li><strong>常用的聚合函数</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名称</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SUM()</td>\n<td style=\"text-align:center\">返回表达式中所有值的和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AVG()</td>\n<td style=\"text-align:center\">打算平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MIN()</td>\n<td style=\"text-align:center\">返回表达式的最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MAX()</td>\n<td style=\"text-align:center\">返回表达式的最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COUNT()</td>\n<td style=\"text-align:center\">返回组中项目的数量</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>特征</strong><br />\n a. 对一列值进行计算，并返回一个值<br />\n b. 聚合函数经常与 <code>group by</code>  分组依据一起使用<br />\n<strong>（单列）分组聚合</strong></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 分组依据<span class=\"token punctuation\">,</span> 聚合函数<span class=\"token punctuation\">(</span>列<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表  <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组依据</pre></td></tr></table></figure><p><strong>（多列）分组聚合</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 分组依据<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 分组依据<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 聚合函数<span class=\"token punctuation\">(</span>列<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组依据<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 分组依据<span class=\"token number\">2</span></pre></td></tr></table></figure><p>c. 聚合表达式可作为筛选条件。要求放在 group by 之后使用 having 聚合表达式 … 构成筛选条件</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 分组依据<span class=\"token punctuation\">,</span> 聚合函数<span class=\"token punctuation\">(</span>列<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> 表 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组依据 <span class=\"token keyword\">having</span> 聚合函数<span class=\"token punctuation\">(</span>列<span class=\"token punctuation\">)</span> …</pre></td></tr></table></figure><h2 id=\"hibernate连接查询\"><a class=\"anchor\" href=\"#hibernate连接查询\">#</a> Hibernate 连接查询</h2>\n<ul>\n<li><strong>内连接查询</strong><br />\n<strong>前提：</strong> 已经在两个类的映射文件中建立了关联映射。（手动、或 Hibernate 反向工程均可）<br />\n<strong>要点：</strong> 只要 A 对象有一个元素为 Set<B>属性，就可以通过下述语句查询到 Set<B> 对应的所有记录。</li>\n</ul>\n<blockquote>\n<p>from 类 A 别名 inner join fetch 别名.Set 属性名</p>\n</blockquote>\n<p><span class=\"red\">注意：</span><br />\n（1）类名后必须取别名<br />\n（2）join 后如果没有 fetch 关键字，则返回的结果不是 类的对象，而是 Object []<br />\n（3）别名。属性名 表示要连接的表</p>\n<ul>\n<li><strong>左外连接查询</strong><br />\n<strong>语法：</strong></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> 别名 <span class=\"token keyword\">from</span> 类名 别名 <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> <span class=\"token keyword\">fetch</span> 别名<span class=\"token punctuation\">.</span>属性名</pre></td></tr></table></figure><ul>\n<li><strong>隐式内连接与显示内连接</strong><br />\n显式内连接：select A. 属性 1,B. 属性 1  …  from A inner join B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ9Qi5pZA==\">A.id=B.id</span><br />\n 隐式内连接：select A. 属性 1,B. 属性 1  …  from A,B where <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ9Qi5pZA==\">A.id=B.id</span><br />\n 说明：（1）显式内连接与隐式内连接的执行效果完全相同，使用时，掌握一种即可。</li>\n</ul>\n<h2 id=\"子查询hql\"><a class=\"anchor\" href=\"#子查询hql\">#</a> 子查询（HQL）</h2>\n<ul>\n<li><strong>all</strong><br />\n 语法：all (select 子查询)<br />\n 含义：子查询结果全部</li>\n<li><strong>any</strong><br />\n 语法：any (子查询)<br />\n 含义：子查询结果中至少有一条</li>\n</ul>\n<h2 id=\"hql查询优化\"><a class=\"anchor\" href=\"#hql查询优化\">#</a> HQL 查询优化</h2>\n<p>（1）避免不恰当的 <code>or</code>  操作<br />\n（2）避免使用 <code>not</code> <br />\n（3）避免 <code>like</code>  的特殊形式<br />\n（4）避免 <code>having</code>  子句<br />\n（5）避免 <code>distinct</code> <br />\n（6）避免让 <code>索引</code> 失效的情形</p>\n<h2 id=\"用注解实现持久化类-关联关系\"><a class=\"anchor\" href=\"#用注解实现持久化类-关联关系\">#</a> 用注解实现持久化类、关联关系</h2>\n<p>在 Java 类中 添加若干注解来表示以下信息：<br />\n（1）Java 中声明持久化类\t\t\t\t\t\t@Entity<br />\n（1）Java 类与表的对应关系\t\t\t\t\t@Table\t<br />\n（2）Java 类主属性与表主键的对应关系\t\t\t@Id<br />\n（3）Java 类一般属性与表一般属性的对应关系\t\t@Column</p>\n<p><strong>好处：</strong><br />\n不再需要 Java 类.hbm.xml 配置文件，简化了开发过程。<br />\n<strong>配置映射关系的常用注解</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解</th>\n<th style=\"text-align:center\">含义和作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@Entity</td>\n<td style=\"text-align:center\">该类是一个持久化类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Table</td>\n<td style=\"text-align:center\">指定对应的表   （默认值：持久化类名，不带包名）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Id</td>\n<td style=\"text-align:center\">指定主键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Column</td>\n<td style=\"text-align:center\">指定非主键列。<br>注：无此注解时，默认对应到表中的同名字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@GeneratedValue</td>\n<td style=\"text-align:center\">指定主键生成策略。 注：无此注解时，默认为 assigned。<br>@GeneratedValue (strategy=GenerationType.AUTO)   // 相当于 native</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@UniqueConstraint</td>\n<td style=\"text-align:center\">唯一值约束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Notnull</td>\n<td style=\"text-align:center\">非空约束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Lob</td>\n<td style=\"text-align:center\">该属性对应 Blob 类型、Clob 类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Transistent</td>\n<td style=\"text-align:center\">该属性无需持久化到数据库中（即在数据库中没有字段与之对应）</td>\n</tr>\n</tbody>\n</table>\n<p>如何使用注解？：<br />\n（1）在 Java 类中，Import javax.persistence.*;<br />\n（2）在 Java 类中，使用注解表示 Java 类与表、Java 属性与表字段等对应关系。<br />\n<strong>配置关联映射的常用注解</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@OneToOne</td>\n<td style=\"text-align:center\">对象 A 和对象 B 是 一对一关系</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@OneToMany</td>\n<td style=\"text-align:center\">对象 A 和对象 B 是 一对多关系</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@ManyToOne</td>\n<td style=\"text-align:center\">对象 A 和对象 B 是 多对一关系</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@ManyToMany</td>\n<td style=\"text-align:center\">对象 A 和对象 B 是 多对多关系</td>\n</tr>\n</tbody>\n</table>\n<p><strong>结论：</strong><br />\n有了注解，没有不必再写映射文件了。直接在 java 类中写出表映射、字段映射关系即可。</p>\n",
            "tags": [
                "计算机科学",
                "SSH轻量级框架",
                "学习笔记",
                "SSH",
                "Hibernate"
            ]
        },
        {
            "id": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-8/",
            "url": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-8/",
            "title": "第8周 配置Hibernate关联映射",
            "date_published": "2020-11-04T13:05:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note info\">\n<p>以下为个人学习笔记</p>\n</div>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<p>数据库设计中，两个实体之间的三种关系</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对应关系</th>\n<th style=\"text-align:center\">举例</th>\n<th style=\"text-align:center\">如何加外键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一对一</td>\n<td style=\"text-align:center\">人与身份证</td>\n<td style=\"text-align:center\">在任意一张表上加外键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">一对多</td>\n<td style=\"text-align:center\">部门 与 员工</td>\n<td style=\"text-align:center\">在多的一方添加外键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">多对多</td>\n<td style=\"text-align:center\">学生 和 课程</td>\n<td style=\"text-align:center\">新加一张中间表</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"java类中表示三种关联\"><a class=\"anchor\" href=\"#java类中表示三种关联\">#</a> Java 类中表示三种关联</h2>\n<p><strong>1、一对一</strong><br />\n双向关联：<br />\n从 A 对象可以查到 B 对象，同时从 B 对象也能查 A 对象，则称为 <code>双向关联</code> 。<br />\n<strong>例：人与身份证</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Card</span> card<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>单向关联：<br />\n从 A 对象能查到 B 对象，但从 B 对象查不到 A 对象，则称为 <code>单向关联</code> 。<br />\n<strong>例：人与身份证</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 人类代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//private Card card;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 身份证类代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>2、一对多</strong><br />\n<strong>例：部门与员工</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 部门类代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dept</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> emps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 员工类代码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dept</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>3、多对多</strong><br />\n<strong>例：学生和课程</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 学生类代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Course</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  cs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 课程类代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Course</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\tss<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一对多关联\"><a class=\"anchor\" href=\"#一对多关联\">#</a> 一对多关联</h2>\n<p>建立关联的目的：从一个对象 可以查询另一对象的信息。<br />\n<strong>例如:</strong><br />\n 从 Dept 对象，调用它的 getEmps () 方法，就能查到他的所有订单；<br />\n反过来，从一个 Emp 对象，调用它的 getDept () 方法，就能查到客户的信息。<br />\n并且，这种查询无需额外的写 SQL 语句，而是采用 ORM 思想实现。<br />\n一对多实现步骤：<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/8.1.png\" alt=\"\" /><br />\n<strong>效果</strong>：<br />\n在 Dept 对象中，可通过 getEmps () 方法，查询它的所有员工；<br />\n在 Emp 对象中，可通过 getDept () 方法，查询他的部门：<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/8.2.png\" alt=\"\" /><br />\n<strong>好处:</strong><br />\n 从一个对象可以方便地查询出另外一个对象的信息。<br />\n<strong>A. 从一查多</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从顾客查所有订单</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getOrdersByCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">Customer</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">)</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Orders</span> o<span class=\"token operator\">:</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getOrders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>B. 从多查一</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从订单查顾客</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCustomerByOrders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">Orders</span> o<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Orders</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Orders</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"级联操作cascade\"><a class=\"anchor\" href=\"#级联操作cascade\">#</a> 级联操作 (cascade)</h2>\n<p>含义：若两个 Java 对象已建立了关联，那么一个对象更新时，可以相应地更新所关联的对象。<br />\n设置方式：通过设置映射文件的 set 标签的 cascade 属性的值来设置<br />\n cascade 的主要取值：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">取值</th>\n<th style=\"text-align:center\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">save-update</td>\n<td style=\"text-align:center\">相当于 save 和 update 的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete</td>\n<td style=\"text-align:center\">删除 1 的一方时，把关联的 set 对象 也从表中删除。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>例 1：</strong> 保存部门时，级联将 部门.emps 保存数据库中<br />\n 1、在 dept 映射文件中配置 cascade 属性</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cascade</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save-update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptno<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-to-many</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>po.Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、调用 dept.getEmps.add 方法添加员工</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 级联操作保存部门对象时，把部门的 Emp 对象也保存到数据库中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cascadeDeptEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Dept</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 dept 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   d<span class=\"token punctuation\">.</span><span class=\"token function\">setDeptno</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   d<span class=\"token punctuation\">.</span><span class=\"token function\">setDname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网络中心\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">Empe1</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 emp 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   e1<span class=\"token punctuation\">.</span><span class=\"token function\">setEmpno</span><span class=\"token punctuation\">(</span> <span class=\"token number\">8001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   e1<span class=\"token punctuation\">.</span><span class=\"token function\">setEname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   d<span class=\"token punctuation\">.</span><span class=\"token function\">getEmps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存 dept 对象对象 (网络中心)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">注:</span><br />\n 在哪个配置文件中开启的 cascade 属性，则只有调用该对象的方法，才可实现级联操作。<br />\n由于在 Dept.hbm.xml 文件中配置的 cascade 属性，所以调用 dept.getEmps ().add 方法将员工添加到部门，才能实现级联保存。（反之，如果调用 e1.setDept (d)，级联保存可能失败）。<br />\n<strong>例 2：</strong> 删除部门时，删除部门的员工<br />\n 1、在 dept.hbm.xm | 中 cascade 属性设置 delete</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cascade</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deLete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptno<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-to-many</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>po.Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、测试函数。删除 deptno=50 的部门</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 级联删除部门对象时，把部门] 的 Emp 对象也从数据库中删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cascadeDeleteEmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Dept</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Dept</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dept</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取 deptno=50 的部门</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除部门</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   s<span class=\"token punctuation\">.</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>例 3：</strong> 保存顾客时，级联保存订单<br />\n 1、在 Customer.hbm.xml 中设置 cascade 属性</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cascade</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save-update <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-to-many</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>po.Order<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-to-many</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、运行测试函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cascadeSave1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Order</span> o1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建订单 o1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   o1<span class=\"token punctuation\">.</span><span class=\"token function\">set0id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   o1<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"广州市\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   o1<span class=\"token punctuation\">.</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span> <span class=\"token number\">200d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">Customer</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 顾客王五</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   c<span class=\"token punctuation\">.</span><span class=\"token function\">setCid</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   c<span class=\"token punctuation\">.</span>setName <span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   c<span class=\"token punctuation\">.</span><span class=\"token function\">get0rders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将订单添加到顾客的 Set&lt;orde</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存顾客</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>例 4：</strong> 删除顾客时，级联删除订单<br />\n 1、在 Customer.hbm.xml 中设置 cascade 的 delete 属性</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cascade</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save-update delete<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">&lt;key</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>cid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>one-to-many</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>po.Order<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>one-to-many</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、执行测试函数 (删除 cid=3 的顾客)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 级联删除删除顾客王五 (cid=3) 时，级联删除订单</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cascadeDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Customer</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">注：</span><br />\n（1）删除游离态的对象时，没有级联删除效果；只有删除持久态对象时，才有级联删除效果。<br />\n（2）在哪个配置文件中 开启的 cascade 属性，则只有调用该对象的方法，才可实现级联操作。<br />\n例如：在 Dept.hbm.xml 文件中配置的 cascade 属性，所以调用 dept.getEmps ().add 方法将员工添加到部门，才能实现级联保存。（反之，如果调用 e1.setDept (d)，级联保存可能失败）</p>\n<h2 id=\"反转操作inverse属性\"><a class=\"anchor\" href=\"#反转操作inverse属性\">#</a> 反转操作 (inverse 属性)</h2>\n<p>用途：两个类都维护外键时，让其中一方放弃外键维护，以减少不必要的 <code>update</code>  语句。<br />\ninverse 取值为 <code>true</code> ，代表放弃了外键维护能力。<br />\n用法：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">...</span> <span class=\"token attr-name\">inverse</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>结论：</strong><br />\n开发中，在一的一方映射文件里，写上 <code>inverse=&quot;true&quot;</code> ,  让一的一方放弃维护外键。</p>\n<h2 id=\"多对多关联\"><a class=\"anchor\" href=\"#多对多关联\">#</a> 多对多关联</h2>\n<p>作用：两个实体如果是多对多的联系，在完成多对多关联之后，通过调用 get 方法，可以获取到另一个实体。<br />\n<strong>例：</strong> 学生选课程<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/8.3.png\" alt=\"\" /><br />\n多对多实现步骤:<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/8.4.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//(1) 多对多关联获取张三 (sid 23) 选的所有课程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStudentCourses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> courses <span class=\"token operator\">=</span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getCourses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span> c<span class=\"token operator\">:</span>courses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print1n</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//(2) 多对多关联获取选了 cid=25 的课程 (软件设计与体系结构) 的所有学生</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCourseStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">Session</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">Course</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> stu<span class=\"token operator\">:</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"加载策略\"><a class=\"anchor\" href=\"#加载策略\">#</a> 加载策略</h2>\n<p>使用 Hibernate 在两个 Java 类建立了关联映射后，可以方便地从一个 Java 对象查到另一个 Java 对象的信息。<br />\n例如，在 Dept 对象和 Emp 对象之间建立了一对多关联映射后，可以很方便地从一个 dept 对象查到所有 emp 的信息。<br />\n假如业务实际上只要用到 Dept 对象，而程序却在加载 Dept 对象时，把 Dept 对象关联的所有 emp 对象也加载上了，就会产生两个弊端：<br />\n（1）执行不必要的查询语句，降低程序性能<br />\n（2）查出来的对象占据额外的内存空间<br />\n为了克服以上弊端，Hibernate 采用了 延迟加载的策略，只有当真正需要用到关联的对象，才会加载关联的对象。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:center\">取值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">class 标签中设置 <code>lazy= &quot;true&quot;</code></td>\n<td style=\"text-align:center\">true 延迟加载<br>false 立即加载</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set 标签中设置 <code>lazy =&quot;true&quot;</code></td>\n<td style=\"text-align:center\">true 延迟加载<br>extra 增强延迟加载<br>false 立即加载</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">many-to-one 标签中设置 <code>lazy =&quot;proxy&quot;</code></td>\n<td style=\"text-align:center\">proxy 延迟加载<br>no-proxy 无代理延迟加载<br>false 立即加载</td>\n</tr>\n</tbody>\n</table>\n<p>为了使程序响应时间尽量短、占用内存空间尽量少， hibernate 在上述三个级别上采用的都是 延迟加载策略。</p>\n",
            "tags": [
                "计算机科学",
                "SSH轻量级框架",
                "学习笔记",
                "SSH",
                "Hibernate"
            ]
        },
        {
            "id": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-7/",
            "url": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-7/",
            "title": "第7周 HQL查询语言",
            "date_published": "2020-11-04T11:49:02.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note info\">\n<p>以下为个人学习笔记</p>\n</div>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"query对象-查询数据库\"><a class=\"anchor\" href=\"#query对象-查询数据库\">#</a> Query 对象 查询数据库</h2>\n<ul>\n<li><strong>查多条记录</strong><br />\n方法： <code>list()</code> <br />\n 语法： <code>Query q = session.createQuery(&quot;from 类名&quot;);</code> <br />\n<span class=\"red\"> 注意：</span> from 要跟类的名称，不跟表的名称。<br />\n** 例：** 查询 Dept 表中 Sales 部的信息</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Dept where dname='SALES'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dept</span><span class=\"token punctuation\">></span></span> li<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dept</span> e<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>查一条记录</strong><br />\n方法： <code>uniqueResut()</code> <br />\n 语法： <code>Query.uniqueResult()</code> <br />\n 功能：从表中查出一条记录<br />\n ** 例：** 查询 emp 表中 empno 等于 7499 的记录</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp where empno=:empno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empno\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7499</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Emp</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">)</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">uniqueResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>只查部分列（投影查询）</strong></li>\n</ul>\n<ul>\n<li>方法 1：<br />\n方法： <code>session.createQuery(select 列1,列2,…. from 类名)</code> <br />\n 效果：查询出来的每条记录被放在一个 Object [] 中<br />\n ** 例：**1 条记录放在一个 obj [] 数组中存放</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select deptno,dname from Dept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list2 <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> obj<span class=\"token operator\">:</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;deptNo:\"</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\",:dName:\"</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>方法 2：<br />\n首先，在对应类中添加构造方法，为要查询的列赋值<br />\n然后使用方法： <code>session.createQuery(select new 类名(列1,列2,…) from 类名)</code> <br />\n 效果：查询出来的每条记录就是一个 Java 对象<br />\n ** 例：** 以 Java 对象方式返回结果</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select new Dept(deptno,dname) from Dept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dept</span><span class=\"token punctuation\">></span></span> li <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dept</span> d<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;deptNo:\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getDeptno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",:dName:\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getDname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>Where 条件查询</strong><br />\n ** 例：** 查询 emp 表中，ename 是 Smith 的用户</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp where ename='SMITH'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">></span></span> liEmp<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> e<span class=\"token operator\">:</span>liEmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">注：</span> 当查询条件是参数，则需要使用占位符或者参数名进行绑定<br />\n ** 例 1：** 使用占位符？设置参数值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp where ename=?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"SMITH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>** 例 2：** 使用参数名设置参数值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp where ename=:ename\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ename\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"SMITH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>指定参数类型：</strong><br />\nsetBoolean (参数名，参数值)<br />\n setByte (参数名，参数值)<br />\n setDouble (参数名，参数值)<br />\n setDate (参数名，参数值)<br />\n setString (参数名，参数值)</p>\n<ul>\n<li><strong>分页查询</strong><br />\n语法：<br />\n从第几条开始显示: <code>Query.setFirstResult(m)</code> <br />\n 总共显示几条: <code>Query.setMaxResults(n)</code> <br />\n 功能：显示结果中的第 m 条开始的 n 条记录<br />\n ** 例：** 查询  emp 中按 sal 降序排列第 5 到第 9 条记录</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp order by sal desc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从第 5 条开始显示 （下标从 0 开始）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxResults</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显示 5 条</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">></span></span> li <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> e<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"criteria对象多条件查询\"><a class=\"anchor\" href=\"#criteria对象多条件查询\">#</a> Criteria 对象（多条件查询）</h2>\n<p>语法： <code>Criteria c=session.createCriteria()</code></p>\n<ul>\n<li><strong>显示所有记录</strong><br />\n ** 例：** 显示 emp 中的所有记录</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Criteria</span> c<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">createCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">></span></span> li<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> e<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>添加限制条件</strong><br />\n ** 例：** 查询 job 为 CLERK、sal&gt;1000、入职时间在 1981-04-01 到 1985-09-09 之前的员工</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解法 1：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Criteria.add (Restrictions) 的多条件查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Criteria</span> c<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">createCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Restrictions</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"job\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CLERK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Restrictions</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sal\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Restrictions</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hiredate\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">strToDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1981-04-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">strToDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1985-09-09\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">></span></span> li<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> e<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 解法 2（传统）：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 使用占位符的多条件查询</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span><span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from Emp where job=:job and sal>=:sal and hiredate>=:h1 and hiredate&lt;=:h2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"job\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CLERK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sal\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">strToDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1981-04-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>q<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HibernateUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">strToDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1985-09-09\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">></span></span> li <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> e<span class=\"token operator\">:</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"反向工程\"><a class=\"anchor\" href=\"#反向工程\">#</a> 反向工程</h2>\n<p>功能：从数据库中的表 自动生成 Java 类、类 - 表映射文件<br />\n步骤：<br />\n（1）在 Package Explorer 中 左键点击工程<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.1.png\" alt=\"\" /><br />\n（2）MyEclipse--&gt;Project Capabilities--&gt;Add Hibernate Capacilities<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.2.png\" alt=\"\" /><br />\n（3）选择 Hibernate 版本<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.3.png\" alt=\"\" /><br />\n（4）选择数据库配置文件<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.4.png\" alt=\"\" /><br />\n（5）创建 HibernateSessionFactory 类<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.5.1.png\" alt=\"\" /><br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.5.2.png\" alt=\"\" /><br />\n（6）在 MyEclipse 中打开 Database Explorer<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.6.png\" alt=\"\" /><br />\n（7）新建一个连接<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.7.1.png\" alt=\"\" /><br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.7.2.png\" alt=\"\" /><br />\n数据库驱动程序名： <code>oracle.jdbc.driver.OracleDriver</code> <br />\n 数据库实例： <code>jdbc:oracle:thin:@主机名/IP:1521:数据库实例名</code> <br />\n（8）在 DB Explorer 中登录数据库<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.8.png\" alt=\"\" /><br />\n（9）在 DB Browser 中找到要生成 PO 类、映射文件的表<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.9.png\" alt=\"\" /><br />\n（10）选择生成的 PO 类、映射文件放置的目录<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.10.png\" alt=\"\" /><br />\n（11）查看生的 PO 类、映射文件<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/7.11.png\" alt=\"\" /><br />\n（12）说明：<br />\n自动生成的 PO 类的数据类型，有时需要根据实际情况进行修改。<br />\n（例如：java.lang.BigDecimal 修改成 java.lang.Long）</p>\n",
            "tags": [
                "计算机科学",
                "SSH轻量级框架",
                "学习笔记",
                "SSH",
                "Hibernate"
            ]
        },
        {
            "id": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-6/",
            "url": "http://www.xieyihui.top/2020/11/04/computer-science/SSH/week-6/",
            "title": "第6周 主键生成策略、Java对象的三种状态、Hibernate缓存、脏检查",
            "date_published": "2020-11-04T07:13:39.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note info\">\n<p>以下为个人学习笔记</p>\n</div>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"主键生成策略\"><a class=\"anchor\" href=\"#主键生成策略\">#</a> 主键生成策略</h2>\n<ul>\n<li><strong>native</strong><br />\n 由 Hibernate 根据数据库的类型自动生成主键。Java 程序不必管理主键。<br />\n使用频率：常用<br />\n优点：不管底层使用何种数据库，都适用。</li>\n<li><strong>assigned</strong><br />\nJava 程序要生成主键值，Hibernate 不生成主键值。（默认方式）<br />\n使用频率：常用</li>\n<li><strong>increment</strong><br />\n 主键由 hibernate 维护。<br />\n缺点：；两个用户同时插入记录时，可能发生主键冲突<br />\n使用频率：较少</li>\n<li><strong>identify</strong><br />\n 主键由数据库维护。适用于 <code>mysql</code> 、 <code>sql server</code>  等数据库<br />\n它要求数据库把主键定义为自动增长字段类型<br />\n优点：无线程冲突问题。<br />\n使用频率：较少</li>\n<li><strong>sequence</strong><br />\n 主键由数据库维护，适用于 <code>Oralce</code> 。<br />\n由 sequence 自动生成值来作为主键值。<br />\n使用频率：较少</li>\n</ul>\n<h2 id=\"持久化对象的三种状态\"><a class=\"anchor\" href=\"#持久化对象的三种状态\">#</a> 持久化对象的三种状态</h2>\n<p>持久化对象：PO = VO + hbm 映射<br />\n<strong> PO 对象的三种状态</strong><br />\n划分依据：是否与 session 关联（.save (obj)  .update (obj)  .get (obj)）、是否有 OID</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">是否与 session 关联</th>\n<th style=\"text-align:center\">是否有 OID</th>\n<th style=\"text-align:center\">Java 对象的状态</th>\n<th style=\"text-align:center\">对表中记录的影响力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">瞬时态</td>\n<td style=\"text-align:center\">无法影响表中的记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">游离态</td>\n<td style=\"text-align:center\">只有在关联上 session 后，才能影响表中记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">持久态</td>\n<td style=\"text-align:center\">能够影响到表中记录<br>当发生 session.getTransaction ().commit (); 表中的记录就会与被 Java 对象更新。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>瞬时状态（transistent）</strong><br />\n本质特征：无 OID、且未与 session 关联<br />\n例如以下两种情况：<br />\n情况 (1) <code>new</code>  出来的对象。<br />\n情况 (2) 被 <code>session.delete(obj)</code>  的对象。</li>\n<li><strong>持久化状态（Persistent）</strong><br />\n本质特征：有 OID、且与 session 关联<br />\n例如以下两种情况：<br />\n情况（1）从表中查到对象： <code>session.get()</code> 、 <code>session.load()</code> <br />\n 情况（2）使用对象更新表中的记录： <code>session.save(obj)</code> 、 <code>.update(obj)</code> 、 <code>.saveOrUpdate(obj)</code> 、 <code>.merge(obj)</code></li>\n<li><strong>游离状态（Detached）</strong><br />\n本质特征：有 OID、且未与 session 关联<br />\n例如以下情况：<br />\n <code>session.close()</code> ，引起 obj 与数据库的连接断开。</li>\n</ul>\n<h2 id=\"脏检查-刷新缓存\"><a class=\"anchor\" href=\"#脏检查-刷新缓存\">#</a> 脏检查、刷新缓存</h2>\n<p><strong>session 缓存</strong><br />\n作用： <code>load</code> 、 <code>get</code>  执行后，查出的对象的所有属性会被记录在缓存，形成快照。<br />\n当后来发生 <code>查询</code> 、 <code>事务提交</code> 、 <code>session.flush()</code>  时，hibernate 会将涉及的对象与快照进行比较，相同，则不更新数据库。不同，才更新数据库。<br />\n缓存的目的，是减少访问数据库的次数。<br />\n缓存的存在时长:<br />\n 只要 <code>session</code>  不关闭，对象就一直存在于缓存中。<br />\n<strong>缓存的常见操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序列</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">session.flush()</td>\n<td style=\"text-align:center\">用缓存中的对象更新数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">session.clear()</td>\n<td style=\"text-align:center\">清空缓存中的所有对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">session.evict(object)</td>\n<td style=\"text-align:center\">清空缓存中的指定对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">session.refresh(object)</td>\n<td style=\"text-align:center\">让对象回到快照的状态（刚从数据库中 get 到的状态）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>脏检查</strong><br />\n（1）使用 <code>session.load</code> 、 <code>session.get</code>  从数据库中查到对象时，session 会在缓存中记住该对象的所有属性（称为快照）。<br />\n（2）执行 <code>transaction.commit()</code>  时，hibernate 会检查对象与快照是否完全相同。<br />\n把事务提交时的对象与快照进行比较，称为 <code>脏检查</code> 。<br />\n检查的目的：如果对象与快照一致，则无需更新数据库，节省时间、资源。只有当对象与快照不一致时，才需要更新数据库。</li>\n<li><strong>刷新缓存</strong><br />\n含义：用 session 缓存中的对象属性，去更新数据库<br />\n何时发生：<br />\n(1) <code>session.flush()</code> <br />\n(2) <code>transaction.commit()</code></li>\n</ul>\n<h2 id=\"hibernate-api更新数据\"><a class=\"anchor\" href=\"#hibernate-api更新数据\">#</a> Hibernate API 更新数据</h2>\n<p>更新数据的 <code>三种</code> 方法：</p>\n<ul>\n<li><strong>session.update（游离态对象）</strong><br />\n功能：用游离态对象 去更新表中对应记录。</li>\n<li><strong>session.saveOrUpdate（瞬时态对象 | 游离态对象）</strong><br />\n功能：<br />\n当传入瞬时态对象时，效果相当于 session.save ()，即将对象插入到表中<br />\n当传入游离态对象时，效果相当于 session.update ()，用对象去更新表中对应记录。</li>\n<li><strong>session.merge（瞬时态对象 | 游离态对象）</strong><br />\n功能:<br />\n 当传入的是瞬时对象，则将该瞬时对象插入数据库，同时返回持久态的该对象。<br />\n当传入的是游离态对象，则根据该对象更新数据库，同时返回持久态的该对象。</li>\n</ul>\n<p><strong>merge 与 save 方法的比较</strong></p>\n<ul>\n<li>相同点： 都是将 new 出来的对象 保存到表中</li>\n<li>不同点：merge 保存后会返回该 PO 对象，而 save 不能返回该 PO 对象。<br />\n<strong>merge 与 update 方法的比较</strong></li>\n<li>相同点：都是用游离态的对象去 更新表中的记录</li>\n<li>不同点：merge 更新后会返回该 PO 对象，而 update 返回 void 值。<br />\n<strong>总结：</strong><br />\n存入用 <code>save</code> <br />\n 更新用 <code>update</code> <br />\n 如果存入、更新后还要使用该 PO 对象，则使用 <code>merge</code></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "SSH轻量级框架",
                "学习笔记",
                "SSH",
                "Hibernate"
            ]
        },
        {
            "id": "http://www.xieyihui.top/2020/10/28/computer-science/SSH/week-5/",
            "url": "http://www.xieyihui.top/2020/10/28/computer-science/SSH/week-5/",
            "title": "第5周 SSH入门",
            "date_published": "2020-10-28T09:37:23.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note info\">\n<p>以下为个人学习笔记</p>\n</div>\n<h1 id=\"课堂笔记\"><a class=\"anchor\" href=\"#课堂笔记\">#</a> 课堂笔记</h1>\n<h2 id=\"hibernate简介\"><a class=\"anchor\" href=\"#hibernate简介\">#</a> Hibernate 简介</h2>\n<p>1、是一个开源框架<br />\n 2、Hibernate 对 JDBC 进行了封装<br />\n 3、采用了 <code>ORM</code>  设计思想</p>\n<blockquote>\n<p>Object Relational Mapping，对象关系映射。<br />\n对象：Java 对象<br />\n关系：表<br />\n映射：在 Java 对象的属性 和数据库表的字段之间建立联系，以便通过操作 Java 对象就能操作表。</p>\n</blockquote>\n<p>4、工作层</p>\n<blockquote>\n<p>持久化层：DAO 层</p>\n</blockquote>\n<p>DAO 类（Data Access Object）的概念：</p>\n<blockquote>\n<p>对表进行数据库操作（增删改查等）的类，称为 DAO 类。DAO 类的作用就是对表进行增删改查，并返回结果。</p>\n</blockquote>\n<p>关联阅读：VO 类<br />\n VO 类（Value Object）的概念：<br />\n<strong>VO 是用来表示 表中的一条记录的 Java 类。</strong></p>\n<p>5、Hibernate 带来的便利<br />\n<strong>无需写 SQL 语句就能实现对数据库的操作。</strong></p>\n<h2 id=\"搭建hibernate环境\"><a class=\"anchor\" href=\"#搭建hibernate环境\">#</a> 搭建 Hibernate 环境</h2>\n<p>关于 11 个 jar 包的说明：<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/5.1.png\" alt=\"\" /></p>\n<h3 id=\"步1-导入jar包-log4j日志文件\"><a class=\"anchor\" href=\"#步1-导入jar包-log4j日志文件\">#</a> 步 1  导入 jar 包、log4j 日志文件</h3>\n<p>（1）在项目下新建名为  <code>lib</code>  的文件夹， 将上述 11 个 jar 包导入到 lib 目录中。<br />\n（2）把 <code>log4j.properties</code>  拷贝到 <code>src</code>  目录下。</p>\n<h3 id=\"步2-拷贝数据库配置文件并设置其中的参数\"><a class=\"anchor\" href=\"#步2-拷贝数据库配置文件并设置其中的参数\">#</a> 步 2  拷贝数据库配置文件并设置其中的参数</h3>\n<p>作用：数据库连接参数<br />\n配置文件名： <code>hibernate.cfg.xml</code> <br />\n1、拷贝方式：<br />\n将配置文件 <code>project\\etc</code>  目录下的 <code>hibernate.cfg.xml</code>  拷贝到项目的 src 目录下<br />\n 2、设置 8 个数据库 <code>property</code>  参数</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hibernate-configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>session-factory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 用户名 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection.username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>system<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 密码 --></span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection.password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>admin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 数据库驱动程序名 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection.driver_class<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>oracle.jdbc.driver.OracleDriver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t <span class=\"token comment\">&lt;!-- 数据库实例 url 地址 jdbc:oracle:thin:@主机名 / IP:1521: 数据库实例名 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection.url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>jdbc:oracle:thin:@127.0.0.1:1521:orcl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 数据库 SQL 语言说明 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dialect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>org.hibernate.dialect.Oracle10gDialect<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 是否将数据库反馈的 SQL 输出到日志 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>show_sql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  \t<span class=\"token comment\">&lt;!-- 是否格式化 SQL--></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>format_sql<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  \t<span class=\"token comment\">&lt;!--session 由当前执行的线程管理 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>current_session_context_class<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>thread<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>session-factory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hibernate-configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"步3-创建vo\"><a class=\"anchor\" href=\"#步3-创建vo\">#</a> 步 3  创建 VO</h3>\n<p>VO 是怎样生成的呢？</p>\n<blockquote>\n<p>a. 数据库中的每一张表，都创建一个 Java 类与之相对应<br />\n b. 表中的每一个字段，都在 Java 类中设置一个 private 属性与之相对应<br />\n c. 最后，为每一个属性创建 setter () 和 getter ()</p>\n</blockquote>\n<p>具体过程如下，以为 dept 表创建持久化类为例：<br />\n<img data-src=\"https://picture-1303140728.cos.ap-guangzhou.myqcloud.com/blog_picture/ssh_picture/5.2.png\" alt=\"\" /><br />\n<strong>数据库字段类型与 Java 类型的对应：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Oracle 数据类型</th>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">MySQL 数据类型</th>\n<th style=\"text-align:center\">Java 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Number(p)</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Varchar2、Nvarchar2</td>\n<td style=\"text-align:center\">java.lang.String</td>\n<td style=\"text-align:center\">varchar</td>\n<td style=\"text-align:center\">java.lang.String</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:center\">java.sql.Date</td>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:center\">java.sql.Date</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BLOB</td>\n<td style=\"text-align:center\">byte[]</td>\n<td style=\"text-align:center\">BLOB</td>\n<td style=\"text-align:center\">byte[]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CLOB</td>\n<td style=\"text-align:center\">java.lang.String</td>\n<td style=\"text-align:center\">CLOB</td>\n<td style=\"text-align:center\">java.lang.String</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"步4-创建-vo-表映射文件并引入到hibernatecfgxml中\"><a class=\"anchor\" href=\"#步4-创建-vo-表映射文件并引入到hibernatecfgxml中\">#</a> 步 4  创建 VO - 表映射文件，并引入到 hibernate.cfg.xml 中</h3>\n<p>说明：<br />\n（1）映射文件通常与对应的 VO 类同名，例如：Dept 类 和 dept 表映射文件的名称：dept.hbm.xml<br />\n<strong> 映射文件模板</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">hibernate-mapping</span> <span class=\"token name\">PUBLIC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hibernate-mapping</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- VO 类与表的对应关系 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>class</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>包名.VO类名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">table</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VO类对应的表名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!----></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VO的哪个属性对应于主键<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>表的主键<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generator</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>assigned<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!—主键的生成策略--</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VO的相应属性1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>表的非主键属性1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> VO的相应属性2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>表的非主键属性2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hibernate-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>（2）将 VO - 表映射文件引入到 hibernate.cfg.xml<br />\n<strong> 格式说明：</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hibernate-configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>session-factory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t…</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapping</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VO-表映射文件的路径<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!—VO与表的映射文件--</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>session-factory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hibernate-configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"步5-编写测试类\"><a class=\"anchor\" href=\"#步5-编写测试类\">#</a> 步 5  编写测试类</h3>\n<p>说明：<br />\n编写测试类，并在测试类中添加 <code>insert</code> 、 <code>delete</code> 、 <code>update</code> 、 <code>select</code>  等操作数据库的方法。<br />\nHibernate 对数据库进行不同的操作， 有相当一部分代码是相同的，共有代码模板如下：<br />\n<strong>Hibernate 进行数据库操作的共有代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//（1）得到配置对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token class-name\">Configuration</span> config <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token comment\">//（2）得到一个 SessionFactory</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token class-name\">SessionFactory</span> sessionFactory<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">buildSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token comment\">//（3）得到一个 Session, 这个 session 代表 Java 程序和数据库之间的会话</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \t<span class=\"token class-name\">Session</span> session<span class=\"token operator\">=</span>sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t<span class=\"token comment\">//（4）开启事务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token class-name\">Transaction</span> t<span class=\"token operator\">=</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \t<span class=\"token comment\">//（5）执行操作  （具体的 CRUD 操作）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  \t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  \t<span class=\"token comment\">//（6）提交事务</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \tt<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  \t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  \t<span class=\"token comment\">//（7）  释放资源</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  \tsession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  \tsessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>insert</strong><br />\ninsert 的第（5）部分代码如下：<br />\n（1）创建一个 VO 对象<br />\n（2）设置 VO 的属性值<br />\n（3）session.save (VO 对象)</li>\n<li><strong>update</strong><br />\nupdate 的第（5）部分代码如下：<br />\n（1）创建一个 VO 对象<br />\n（2）设置 VO 的属性值<br />\n（3）session.update (VO 对象)</li>\n<li><strong>select</strong><br />\nselect 的第（5）部分代码如下：<br />\n（1）session.get (VO 类.class, 主键值)</li>\n<li><strong>delete</strong><br />\ndelete 的第（5）部分代码如下：<br />\n（1）session.get (VO 类.class, 主键值)<br />\n（2）session.delete (VO 对象)<br />\n<strong> 说明：session.load (参 1, 参 2) 、session.get (参 1, 参 2) 两个方法都能根据主键获取到记录。</strong></li>\n</ul>\n<h2 id=\"po类-表映射文件详解\"><a class=\"anchor\" href=\"#po类-表映射文件详解\">#</a> PO 类 - 表映射文件详解</h2>\n<p>PO = VO + 表映射文件<br />\n PO:Persistent Object 持久化对象</p>\n<h3 id=\"po编写规则\"><a class=\"anchor\" href=\"#po编写规则\">#</a> PO 编写规则</h3>\n<p>1) 必须提供无参数 <code>public</code>  构造器<br />\n 2) 所有属性 <code>private</code> ，提供 public 的 getter 和 setter 方法<br />\n 3) 必须提供标识属性（OID），与数据表中主键对应<br />\n 4) PO 类属性应尽量使用基本数据类型的包装类型<br />\n例如 int – Integer  long- Long   double-Double<br />\n5) 不要用 <code>final</code>  修饰 (将无法 生成代理对象进行优化)</p>\n<p><strong> <code>get</code>  与  <code>load</code>  的相同点、不同点</strong><br />\n<strong>相同点：</strong><br />\n都是根据 OID 查找记录，返回对象。<br />\n<strong>不同点：</strong><br />\n当查询的 id 在数据库中不存在时，get 返回 null; load 抛异常 ObjectNotFoundException</p>\n<h3 id=\"po映射文件配置\"><a class=\"anchor\" href=\"#po映射文件配置\">#</a> PO 映射文件配置</h3>\n<p><strong>OID</strong><br />\n 含义：PO 的属性中，与表的主键对应的属性。<br />\n特征：在 Hibernate 中，若两个 PO 的 OID 相同，则会被 Hibernate 认定为一个对象。</p>\n<p>配置类到指定数据库中表的映射</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;class name='cn.itcast.domain.Customer\" table=\"customer\" ></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 配置类中 OID 属性到表主键映射 --></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;generator class=”identy\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generator</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 配置主健生成策略 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 配置普通属性的映射 --></span></pre></td></tr></table></figure><h3 id=\"property上可添加约束\"><a class=\"anchor\" href=\"#property上可添加约束\">#</a> Property 上可添加约束</h3>\n<blockquote>\n<p>(1)unique=&quot;true&quot;<br />\n(2)not-null=&quot;true&quot;<br />\n(3)length=&quot;20&quot;</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "SSH轻量级框架",
                "学习笔记",
                "SSH",
                "Hibernate"
            ]
        }
    ]
}